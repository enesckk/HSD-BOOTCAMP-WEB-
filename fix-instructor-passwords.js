const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function fixInstructorPasswords() {
  try {
    console.log('ðŸ”§ EÄŸitmen ÅŸifreleri dÃ¼zeltiliyor...\n');
    
    // EÄŸitmen hesaplarÄ±nÄ± bul
    const instructors = await prisma.user.findMany({
      where: { role: 'INSTRUCTOR' },
      select: { id: true, email: true, fullName: true }
    });

    console.log(`ðŸ“‹ ${instructors.length} eÄŸitmen hesabÄ± bulundu\n`);

    // Her eÄŸitmen iÃ§in ÅŸifre dÃ¼zelt
    for (const instructor of instructors) {
      const hashedPassword = await bcrypt.hash('instructor123', 10);
      
      await prisma.user.update({
        where: { id: instructor.id },
        data: { password: hashedPassword }
      });

      console.log(`âœ… ${instructor.fullName} (${instructor.email}) - Åžifre: instructor123`);
    }

    console.log('\nðŸŽ‰ TÃ¼m eÄŸitmen ÅŸifreleri dÃ¼zeltildi!');
    console.log('\nðŸ“‹ EÄžÄ°TMEN GÄ°RÄ°Åž BÄ°LGÄ°LERÄ°:');
    console.log('============================');
    console.log('ðŸ”‘ Åžifre: instructor123 (tÃ¼m eÄŸitmenler iÃ§in)');
    console.log('\nðŸ“§ EÄŸitmen Emailleri:');
    instructors.forEach((instructor, index) => {
      console.log(`${index + 1}. ${instructor.email} (${instructor.fullName})`);
    });

  } catch (error) {
    console.error('Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixInstructorPasswords();
