// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model - Katılımcılar için
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  fullName    String
  phone       String
  university  String
  department  String
  role        UserRole @default(PARTICIPANT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks          Task[]        @relation("UserTasks")
  messagesFrom   Message[]     @relation("MessageFromUser")
  messagesTo     Message[]     @relation("MessageToUser")
  channelMessages ChannelMessage[] @relation("ChannelMessages")
  certificates   Certificate[]
  emailRecipients EmailRecipient[]

  @@map("users")
}

// Admin model - Yöneticiler için
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}



// Enums

enum UserRole {
  PARTICIPANT
  ADMIN
}


enum TaskStatus {
  PENDING
  COMPLETED
  REJECTED
}

// Announcement model - Duyurular için
model Announcement {
  id          String   @id @default(cuid())
  title       String
  summary     String
  content     String
  category    String
  date        String
  time        String
  pinned      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

// Message model - Mesajlar için
model Message {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String?  // Belirli kullanıcıya gönderilen mesajlar için
  toRole      String   // "admin", "mentor", "participant"
  subject     String
  body        String
  unread      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  fromUser    User     @relation("MessageFromUser", fields: [fromUserId], references: [id])
  toUser      User?    @relation("MessageToUser", fields: [toUserId], references: [id])

  @@map("messages")
}


// Task model - Görevler için
model Task {
  id                String   @id @default(cuid())
  userId            String?
  title             String
  description       String
  huaweiCloudAccount String?
  uploadType        String   @default("FILE") // "FILE" or "LINK"
  fileUrl           String?
  linkUrl           String?
  status            TaskStatus @default(PENDING)
  // Yeni alanlar
  dueDate           DateTime? // Bitiş tarihi
  priority          TaskPriority @default(MEDIUM) // Öncelik
  category          String?   // Kategori
  tags              String?   // Etiketler
  estimatedHours    Int?      // Tahmini süre (saat)
  actualHours       Int?      // Gerçek süre (saat)
  assignedBy        String?   // Kim tarafından atandı
  notes             String?   // Notlar
  attachments       String?   // Ek dosyalar
  score             Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User?     @relation("UserTasks", fields: [userId], references: [id])

  @@map("tasks")
}


// Notification model - Bildirimler için
model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  actionUrl   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("notifications")
}

// Channel model - Sohbet kanalları için
model Channel {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String
  type        String   @default("chat") // "chat", "network"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages    ChannelMessage[]

  @@map("channels")
}

// ChannelMessage model - Kanal mesajları için
model ChannelMessage {
  id          String   @id @default(cuid())
  channelId   String
  userId      String
  content     String
  messageType String   @default("text") // "text", "question", "answer"
  parentId    String?  // Ana soru için
  isAnswered  Boolean  @default(false) // Soru cevaplandı mı
  createdAt   DateTime @default(now())

  // Relations
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user        User     @relation("ChannelMessages", fields: [userId], references: [id])
  parent      ChannelMessage? @relation("MessageReplies", fields: [parentId], references: [id])
  replies     ChannelMessage[] @relation("MessageReplies")

  @@map("channel_messages")
}

// Certificate model - Sertifikalar için
model Certificate {
  id            String   @id @default(cuid())
  userId        String
  programName   String
  completionDate DateTime
  status        CertificateStatus @default(PENDING)
  score         Int?
  notes         String?
  issuedAt      DateTime?
  downloadUrl   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// Lesson model - Ders linkleri için
model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String
  youtubeUrl  String
  duration    String
  instructor  String
  category    String
  week        Int
  isPublished Boolean  @default(false)
  thumbnailUrl String?
  tags        String?
  // Yeni alanlar
  showDate    DateTime? // Ne zaman gösterileceği
  isActive    Boolean   @default(false) // Şu anda aktif mi
  order       Int       @default(0) // Sıralama
  prerequisites String? // Ön koşullar
  objectives  String?   // Öğrenme hedefleri
  resources   String?   // Ek kaynaklar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

// EmailTemplate model - E-posta şablonları için
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String
  type        EmailType
  attachments String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

// EmailCampaign model - E-posta kampanyaları için
model EmailCampaign {
  id            String   @id @default(cuid())
  subject       String
  content       String
  type          EmailType
  recipientCount Int
  status        CampaignStatus @default(PENDING)
  attachments   String?
  sentAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  recipients    EmailRecipient[]

  @@map("email_campaigns")
}

// EmailRecipient model - E-posta alıcıları için
model EmailRecipient {
  id          String   @id @default(cuid())
  campaignId  String
  userId      String
  email       String
  fullName    String
  status      RecipientStatus @default(PENDING)
  sentAt      DateTime?
  createdAt   DateTime @default(now())

  // Relations
  campaign    EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_recipients")
}

enum EmailType {
  ANNOUNCEMENT
  CERTIFICATE
  REMINDER
  CUSTOM
}

enum CampaignStatus {
  PENDING
  SENT
  FAILED
}

enum RecipientStatus {
  PENDING
  SENT
  FAILED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CertificateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  MESSAGE
  ANNOUNCEMENT
  TASK
  ADMIN_TASK
}
